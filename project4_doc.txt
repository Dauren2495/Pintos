       	       	     +-------------------------+
		     |		EE 415	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Dauren Serkeshev <dauren@kaist.ac.kr>
Abilmansur Zhumabekov <mansur@kaist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct inode_disk
    {
    
         //pointers to sectors where content is located
    +    block_sector_t direct[123];
    
         //pointer to pointers
    +    block_sector_t indirect;

         //pointer to pointers to pointers
    +    block_sector_t d_indirect;

    };



>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

(123+128+128*128)(sectors)*512(bytes/sector) = 8517120 bytes = 8317.5 KB

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.
struct inode {
    +  struct lock extension_lock;
}

in inode_write_at():
Acquire the extension_lock before checking inode->length;
If needed, extend file/directory pointed by inode;
Release the lock;



>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

read is not done if position exceeds length of a file;
length of file is incremented only after a write that
sets offset beyond length of file;
length of file is incremented, if needed, after each block_write,
so A can read all, part, or none of what B writes.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

1) if all processes have same priority, then they are scheduled
in round robin.
2) read can be accomplished after partial write
3) write can be accomplished after partial read
locks are only acquired when checking if file extension is needed or not,
and when directory entries are scanned.
Only writes and reads of a single block are atomic.


---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

Our inode structure is a multilevel index.
#doubly_indirect - 1
#indirect - 1
#direct - 123 - all remaining 4-byte slots in the inode's sector,
	      	3 other slots store other information.
this structure was chosen because most files have small size
much less than 60 kB (< 123*512/1024=61.5KB).
If only doubly indirect indexing was implemented -
addressing would have been slower for most files.
Indirect addressing allows for files in range (61.5KB - 125.5KB)
to be addressed less slowly than with doubly indirect indexing.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct inode_disk {

       +    bool is_dir; //true if directory, false if file

}

struct thread
    {
    //pointer to the current working directory of the thread
    +	struct dir* cwd 
    }

    

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

if path starts with '/', it is considered to be absolute,
otherwise - relative.

When path is absolute - root directory is opened,
it is closed when next directory in the path is found and opened,
which is closed when next directory in the path is found and opened,
and so on.

When path is relative -  current working directory is a starting point,
which is by itself a pointer to an opened directory.

in both cases strtok_r is used.



---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

each struct inode has a struct lock member called 'entries_lock';
it is acquired inside dir_add() and dir_remove()
before doing lookup,
and released in the end of both functions

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

our implementation does NOT allow a directlry to be removed if
it is open by a process or if it is in use as a process's current
working directory.
Before removal, we check directory's inode's open_cnt.
If it is greater than 1, then it means it is open by some other
process. For a directory to be cwd of some process - it needs
to be opened for that purpose.
If open_cnt is 1 - it means that inode was open just to delete
the directory, so we delete it in that case.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

it was not hard to implement.
we do not allow removal of a directory when it is a cwd of some process
or if it is opened by some process.
for a directory to be a cwd - it needs to be open, otherwise
there will be not struct dir*.
So when we make sure that directory is not open by some process,
we also make sure that it is not a cwd of some process -
which means we do not need to write extra code.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

>> C3: Describe your implementation of write-behind.

>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
